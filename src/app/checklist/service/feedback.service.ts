import { Injectable } from '@angular/core';

@Injectable({
  providedIn: 'root'
})
export class FeedbackService {

constructor() { }

feedbackEscolhas(topicCounts: number[]): string {
  const feedbackBase: { array: number[], text: string }[] = [
    { array: [4,0,1,0,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: Seu grÃ¡fico demonstra uma excelente atenÃ§Ã£o Ã  forma e clareza estrutural. No entanto, ele pode ficar visualmente desequilibrado se nÃ£o houver atenÃ§Ã£o Ã s cores e legendas. Um grÃ¡fico bem formatado, mas com cores mal aplicadas, ainda pode confundir.<br>ğŸ’¡ Dica: Expanda para os tÃ³picos 05 e 07 para enriquecer a percepÃ§Ã£o visual e a compreensÃ£o.' },
    { array: [2,4,2,1,4], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª demonstrou uma distribuiÃ§Ã£o bem equilibrada entre forma, cor, e detalhes. Ainda hÃ¡ espaÃ§o para um pouco mais de atenÃ§Ã£o Ã  legenda, mas o resultado Ã© funcional e esteticamente agradÃ¡vel.<br>ğŸ’¡ Dica: Continue explorando pequenas melhorias no tÃ³pico 07 â€” legendas tambÃ©m tÃªm impacto na clareza final.' },
    { array: [1,2,1,1,6], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª demonstra um Ã³timo entendimento de como enriquecer a experiÃªncia do usuÃ¡rio com detalhes e contexto. Mas o grÃ¡fico pode perder clareza estrutural sem formas bem editadas e eixos organizados.<br>ğŸ’¡ Dica: Invista um pouco nos tÃ³picos 04 e 06 para estruturar melhor seu grÃ¡fico antes de complementÃ¡-lo.' },
    { array: [2,5,3,2,4], text: 'ğŸ—£ AvaliaÃ§Ã£o: ParabÃ©ns! Sua seleÃ§Ã£o mostra um equilÃ­brio saudÃ¡vel entre todos os elementos da visualizaÃ§Ã£o. Isso indica uma preocupaÃ§Ã£o com clareza, acessibilidade, estÃ©tica e organizaÃ§Ã£o.<br>ğŸ’¡ Dica: Continue assim!' },
    { array: [3,5,1,1,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª deu bastante atenÃ§Ã£o ao uso de formas e cores â€” o que torna o grÃ¡fico atraente e legÃ­vel. PorÃ©m, ignorar os eixos e a legenda pode comprometer a interpretaÃ§Ã£o precisa dos dados.<br>ğŸ’¡ Dica: NÃ£o esqueÃ§a que bons dados tambÃ©m precisam de bons rÃ³tulos e escalas. Considere incluir pelo menos 1 item dos tÃ³picos 06 e 07.' },
    { array: [1,8,1,1,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª demonstra um domÃ­nio impressionante no uso de cores. Isso Ã© excelente para acessibilidade e estÃ©tica, mas o grÃ¡fico pode acabar visualmente confuso sem formas claras, rÃ³tulos, ou legenda adequada.<br>ğŸ’¡ Dica: Um grÃ¡fico colorido sem contexto vira arte abstrata. Insira ao menos 1 ou 2 itens de estrutura para equilibrar.' },
    { array: [3,6,1,1,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª tem um forte foco no apelo visual, o que Ã© Ã³timo para atrair atenÃ§Ã£o. No entanto, hÃ¡ um sÃ©rio risco de que o grÃ¡fico seja bonito, mas sem clareza nos dados.<br> ğŸ’¡ Dica: Bons grÃ¡ficos sÃ£o bonitos e informativos. Inclua dados tÃ©cnicos como rÃ³tulos, escalas e legenda para completar.' },
    { array: [1,1,4,1,2], text: 'ğŸ—£ AvaliaÃ§Ã£o: Sua atenÃ§Ã£o aos eixos e detalhes mostra uma preocupaÃ§Ã£o legÃ­tima com a clareza e orientaÃ§Ã£o do usuÃ¡rio. PorÃ©m, a comunicaÃ§Ã£o visual depende tambÃ©m de forma e cor â€” e essas Ã¡reas estÃ£o subrepresentadas.<br> ğŸ’¡ Dica: Para uma experiÃªncia completa, complemente com formas bem definidas e uma paleta coerente de cores.' },
    { array: [2,3,2,2,3], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª estÃ¡ no caminho certo! Sua seleÃ§Ã£o Ã© equilibrada e cobre os principais aspectos de um bom grÃ¡fico: estrutura, estÃ©tica, acessibilidade e clareza.<br> ğŸ’¡ Dica: Apenas mantenha esse padrÃ£o e, se possÃ­vel, adicione mais um item ao tÃ³pico 06 para as indiÃ§Ãµes dos planos.' },
    { array: [2,4,2,0,4], text: 'ğŸ—£ AvaliaÃ§Ã£o: O grÃ¡fico estÃ¡ bem construÃ­do em estrutura, cor e estÃ©tica, mas a falta de atenÃ§Ã£o Ã  legenda pode causar dÃºvidas na identificaÃ§Ã£o dos elementos.<br> ğŸ’¡ Dica: Mesmo com rÃ³tulos diretos, considere uma legenda Ãºnica e clara, especialmente em grÃ¡ficos mais complexos.' },
    { array: [2,4,1,1,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: Seu grÃ¡fico certamente serÃ¡ visualmente impactante, com formas e cores bem aplicadas. Contudo, preste atenÃ§Ã£o aos detalhes e aos eixos.<br>ğŸ’¡ Dica: Busque verificar as escalas, rotulaÃ§Ãµes e formataÃ§Ãµes indevidas ou inesperadas.' },
    { array: [0,0,0,0,6], text: 'ğŸ—£ AvaliaÃ§Ã£o: Seu grÃ¡fico estÃ¡ muito focado nos detalhes mas nÃ£o no todo.<br>ğŸ’¡ Dica: Utilize mais das outras etapas para uma visualizaÃ§Ã£o mais correta' },
    { array: [1,9,1,0,0], text: 'ğŸ—£ AvaliaÃ§Ã£o: Sua atenÃ§Ã£o Ã  paleta de cores Ã© exemplar â€” isso contribui para acessibilidade, consistÃªncia e estÃ©tica. PorÃ©m, o grÃ¡fico pode ser visualmente agradÃ¡vel mas tecnicamente frÃ¡gil.<br> ğŸ’¡ Dica: Considere reforÃ§ar os eixos, a legenda e os detalhes para complementar o excelente trabalho com as cores.' },
    { array: [3,0,5,0,0], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª criou uma base sÃ³lida de estrutura e forma. O grÃ¡fico tende a ser compreensÃ­vel e objetivo, mas pode parecer desconexo e sem detalhamento.<br> ğŸ’¡ Dica: Busque conferir as legendas e melhore nos detalhes.' },
    { array: [1,2,1,2,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª tocou pontos importantes, mas de maneira pontual e desconectada. O resultado pode ser um grÃ¡fico que acerta em partes, mas deixa a desejar no todo.<br> ğŸ’¡ Dica: Organize sua seleÃ§Ã£o com mais intenÃ§Ã£o. Escolha 2 ou 3 itens por tÃ³pico e verifique se eles conversam entre si.' },
    { array: [1,1,1,1,1], text: 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª nÃ£o selecionou uma quantidade de boas praticas necessÃ¡rias para o feedback' }
  ];

  let minDistance = Infinity;
  let closestFeedback = 'ğŸ—£ AvaliaÃ§Ã£o: VocÃª ainda nÃ£o selecionou nenhuma boa prÃ¡tica. Isso pode indicar que o grÃ¡fico serÃ¡ gerado sem considerar os principais critÃ©rios de legibilidade, acessibilidade e clareza.<br>ğŸ’¡ Dica: Comece escolhendo pelo menos 2 itens em cada tÃ³pico. Isso garantirÃ¡ que o grÃ¡fico atenda aos padrÃµes bÃ¡sicos de comunicaÃ§Ã£o visual eficaz.';

  for (const entry of feedbackBase) {
    const distance = Math.sqrt(
      entry.array.reduce((sum, val, idx) => sum + Math.pow(val - topicCounts[idx], 2), 0)
    );

    if (distance < minDistance) {
      minDistance = distance;
      closestFeedback = entry.text;
      console.log(distance, "<",minDistance,".",closestFeedback)
    }
  }

  return closestFeedback;
}


}
